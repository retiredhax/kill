# A powerful and multi feature packed selfbot developed by muz
#  first off don't be a skid I release my tools for free, so the community can enjoy them rather than gatekeeping
# I hope you guys enjoy this release and join discord.gg/says for many more ^_^
# A detailted tutorial for this selfbot and my other one(s) can be found on my youtube
# https://www.youtube.com/@reapproved/videos
# CONTACT INFORMATION (if you run into any issues etc): @decmber31 on discord.


import discord
from discord.ext import commands
import asyncio
import os
import time
import requests
import random
from colorama import Fore, Style, init




TOKEN = "MTMyNzEzMzc4MjgzODYwNzk3NQ.GbuWKW.hVQFfUu9g9tqYzyaRfM9h2YUMvA5WoirlZHVKY"  # replace with your token
PREFIX = "?"

intents = discord.Intents.all()
bot = commands.Bot(command_prefix=PREFIX, self_bot=True, intents=intents)

ladder_mode = False  # Global toggle for ladder mode


@bot.event
async def on_ready():
    token = bot.http.token
    user = bot.user

    # Get server count
    guild_count = len(bot.guilds)

    # Get friend count
    headers = {"Authorization": token}
    try:
        r = requests.get("https://discord.com/api/v9/users/@me/relationships", headers=headers)
        friends = [u for u in r.json() if u.get("type") == 1]
        friend_count = len(friends)
    except:
        friend_count = 0

    ascii_art = f"""{Fore.MAGENTA}
( ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£∂‚£æ‚£≤‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚£Ø‚£≥‚°Ñ
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ü‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ω‚£æ‚£ø‚£ø‚†á
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢à‚£ü‚°ü‚£≥‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚†¥‚°ö‚°ã‚°Ö‚¢∏‚†â‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚†Å‚£è‚†É‚°ü‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°µ‚†û‚£´‚†ç‚†°‚†õ‚°ó‚†¶‚£º‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†á‚†Ä‚¢©‚£â‚°à‚†à‚°ª‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£§‚£Ä‚†Ä‚†Ä‚£Ä‚£§‚°∂‚†ã‚†Å‚†ã‚°Ñ‚¢©‚°è‚†É‚†á‚†Å‚†Ü‚£ø‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ü‚†á‚£Ω‚†ß‚°≤‚†Å‚°Å‚¢å‚°é‚¢∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†û‚†°‚°Ä‚†â‚†≥‚£û‚†ô‚†Ä‚†Ñ‚†≤‚†á‚°Ä‚°à‚†ê‚¢ç‚°ö‚†Ä‚†Ä‚†É‚£ø‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°æ‚†Å‚†ë‚†ü‚°é‚¢Å‚°Ä‚†Ü‚††‚†Å‚†ß‚°ô‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°º‚†É‚†à‚†¢‚£å‚†≤‚°Ñ‚†à‚¢Ø‚°™‚£ü‚†Ç‚†è‚†á‚†Ñ‚†Ç‚†®‚†à‚†Ä‚£Å‚†à‚°è‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚¢ã‚†¶‚°Ñ‚†∑‚¢∂‚†É‚¢ã‚†Å‚°â‚¢Ä‚£Ä‚£§‚°≠‚†ø‚°∂‚†æ‚¢∂‚°æ‚†°‚°â‚†¢‚¢Ñ‚°Ä‚†ë‚¢å‚†¢‚°ä‚£ø‚¢ç‚†§‚†Ä‚†Å‚†Ç‚†Ö‚°Å‚†Ç‚†ê‚†Ä‚†Ñ‚°á‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°è‚†Å‚†å‚°Ü‚°∫‚†ô‚††‚£¢‚°µ‚†û‚†´‚†ã‚†Ä‚¢Ä‚†à‚†¢‚¢Ö‚°û‚†°‚£Ä‚†à‚†ë‚†¢‚¢ç‚†í‚£Ñ‚°≥‚°å‚¢∏‚£Ü‚†ë‚†ê‚††‚†Ä‚†Ä‚†Å‚†Ç‚†Ä‚†É‚†à‚°á‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢æ‚†Ä‚†ä‚°ñ‚°Ç‚£™‚£¥‚†û‚°õ‚°°‚°Ñ‚†Ö‚¢Ä‚†Ä‚†Ñ‚†Å‚†Å‚£∏‚†Ä‚†Ç‚†§‚£â‚°í‚†§‚¢Ñ‚£π‚°ü‚†ø‚£æ‚†ã‚†â‚†õ‚£∂‚†í‚†õ‚†ã‚†â‚†â‚†ô‚†õ‚†≤‚†ß‚£§‚°Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†≥‚£á‚°É‚£∞‚£ø‚†É‚†Ä‚£ª‚£•‚†§‚†∂‚†æ‚†§‚£Ö‚°ê‚†Ä‚†∏‚†∑‚£§‚£Ä‚£Ä‚†â‚†Å‚†í‚†¢‚†ç‚¢∞‚°á‚†Ä‚†Ä‚£†‚£ü‚£Ä‚°≠‚†≠‚†ç‚£Å‚°í‚†í‚†§‚¢Ñ‚£Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ñ‚†Ä‚†à‚£ª‚¢ø‚°ß‚†á‚°º‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢¶‚†∞‚°Ä‚†Ç‚¢â‚†â‚†ô‚†õ‚†õ‚†ü‚¢ª‚†´‚†õ‚£∂‚°∂‚†ã‚£ê‚†Æ‚¢ü‚°í‚†§‚£Ä‚†à‚†â‚†í‚†Ñ‚°æ‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚†É‚¢ê‚¢Ö‚£µ‚†É‚¢Ä‚£§‚°Ñ‚†Ä‚†Ä‚¢†‚£§‚°Ä‚†ò‚£á‚†Ç‚†Ö‚†Ü‚†Ñ‚†Ä‚£¢‚†Å‚¢â‚†ì‚°Ä‚†å‚°î‚¢ø‚°ú‚†Æ‚°ì‚¢Ñ‚°à‚†ë‚††‚£ç‚†í‚†§‚£º‚†É‚†Ä‚†Ä
‚†Ä‚£Ñ‚°Ä‚†Ä‚†Ä‚¢∞‚†è‚°°‚†Å‚†Ç‚†ô‚£á‚¢∏‚£ø‚†á‚†Ä‚†Ä‚†∏‚£ø‚°ó‚£∏‚†è‚†Ä‚†á‚†Ä‚†ê‚†µ‚†ß‚¢É‚†Ä‚†à‚†Ä‚†Ñ‚°Ö‚†à‚†ª‚£Ñ‚†â‚†¢‚£â‚†¢‚¢Ñ‚°Ä‚†â‚£æ‚†É‚†Ä‚†Ä‚†Ä
‚†Ä‚†à‚†ô‚†Ä‚†Ä‚£æ‚†Ä‚°à‚¢Ç‚°¥‚†∂‚£ø‚£∑‚£¶‚†Ä‚°Ñ‚¢†‚†Ä‚£¥‚£æ‚°∑‚†ñ‚†ì‚†∂‚¢∑‚£Ä‚†Ç‚†Å‚†Ä‚†™‚°Ä‚†Ä‚†Ö‚†ê‚†Ä‚†Ä‚†π‚¢∑‚£Ñ‚†à‚†ë‚†¶‚¢â‚°æ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚£ø‚°ã‚†Ä‚†Ä‚†Ä‚†ô‚†ø‚£ü‚£ø‚£ø‚°ø‚†ü‚†â‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†â‚†õ‚¢¶‚£ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ñ‚¢Ñ‚¢Ä‚†Ä‚†ä‚†õ‚¢∂‚†∂‚†ã‚¢Ä‚£Ä‚°Ñ‚†Ä‚†Ä‚†Ä
‚†â‚†â‚†Å‚†Ä‚†Ä‚°á‚£∏‚†É‚£ü‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†à‚†ô‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ª‚£¶‚†ä‚††‚†ê‚†ä‚°Ä‚†Ç‚†Ä‚°ê‚†•‚°æ‚†Ä‚†Ä‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚°ø‚†Ä‚¢∏‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£§‚£¥‚£∂‚†Ñ‚†Ä‚†Ä‚†à‚¢ø‚°Ü‚†à‚†É‚††‚†Ä‚†Ä‚†ê‚£∏‚†É‚†Ä‚¢Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†ê‚†ö‚†ã‚†Ä‚†Ä‚†ò‚£ß‚†Ä‚†∏‚£ø‚£ø‚°ø‚†Ä‚†Ä‚¢Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ã‚†Å‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚°Ä‚†Ñ‚†Ä‚†Ç‚¢†‚°æ‚†Å‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†Å‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢∑‚°Ä‚†à‚†â‚†Ä‚†Ä‚†Ä‚†ª‚†ø‚†á‚£†‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚†ó‚†Ä‚£°‚°º‚†ã‚†Ä‚†Ä‚†Ä‚¢§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢≥‚°§‚†§‚£¥‚†≤‚°Ω‚£ñ‚£ö‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚££‚°¥‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†è‚†Ä‚†Ä‚¢®‚£æ‚†Å‚£Ä‚°â‚†ô‚†ì‚¢¶‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£§‚£§‚£¥‚£∂‚£ø‚£ø‚£ø‚£ù‚£∑‚†õ‚¢≥‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£Ä‚£Ä‚£†‚£æ‚£∑‚°ø‚£õ‚°ª‚£∑‚†Ñ‚£º‚†≠‚°Ω‚£ø‚£ø‚£Ö‚°Ä‚†Ä‚£ø‚°ü‚†õ‚†ª‚£è‚†â‚†â‚†ô‚†õ‚†ã‚†Ä‚†Ä‚£Ä‚£¥‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£è‚†Å‚°û‚£ø‚£ü‚†¥‚¢ú‚£ø‚†∑‚†≥‚¢æ‚£Ö‚†Ä‚†â‚†õ‚£ø‚°∑‚£ø‚†ø‚£Ñ‚†Ä‚†ô‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚¢ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚†≥‚¢¨‚£ü‚£Ø‚¢ø‚°É‚†Ä‚†Ä‚†Ä‚¢©‚£†‚°¥‚†û‚†Å‚†Ä‚†ª‚£§‚°Ω‚†Ä‚†Ä‚†Ä‚†ô‚¢¶‚°Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚°ø‚†ô‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ô‚¢ß‚£Ä‚†Ä‚£Ä‚°º‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£¨‚£∑‚£§‚£¥‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢ª‚°â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚†ø‚¢ø‚†ø‚†õ‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä 
{Style.RESET_ALL}
            Test CLIENT v1 {Fore.WHITE}| {Fore.MAGENTA}@becrime
"""




    info_box = f"""{Fore.MAGENTA}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  {Fore.WHITE} C L I E N T   V1               {Fore.MAGENTA}‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë {Fore.WHITE}PREFIX    {Fore.MAGENTA}| {Fore.WHITE}{PREFIX}                      {Fore.MAGENTA}‚ïë
‚ïë {Fore.WHITE}SERVERS   {Fore.MAGENTA}| {Fore.WHITE}{guild_count}                      {Fore.MAGENTA}‚ïë
‚ïë {Fore.WHITE}FRIENDS   {Fore.MAGENTA}| {Fore.WHITE}{friend_count}                      {Fore.MAGENTA}‚ïë
‚ïë {Fore.WHITE}CREATOR   {Fore.MAGENTA}| {Fore.WHITE}@becrime                   {Fore.MAGENTA}‚ïë
‚ïë {Fore.WHITE}SUPPORT   {Fore.MAGENTA}| {Fore.WHITE}hmu on discord       {Fore.MAGENTA}‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
{Style.RESET_ALL}
"""



    print(ascii_art)
    print(info_box)


# LADDER MODE ON
@bot.command()
async def ladder(ctx):
    global ladder_mode
    await ctx.message.delete()
    ladder_mode = True
    print("üî© Ladder Mode Enabled Twin ‚Äî Everything you type will be laddered.")


# LADDER MODE OFF
@bot.command()
async def ladderend(ctx):
    global ladder_mode
    await ctx.message.delete()
    ladder_mode = False
    print("üõë Ladder Mode Disabled Twin ‚Äî You back to normal.")


# LADDER PACK WITH THRAX.TXT
@bot.command()
async def ladderpack(ctx, user: discord.User):
    await ctx.message.delete()
    try:
        with open("thrax.txt", "r", encoding="utf-8") as f:
            lines = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        print("thrax.txt not found nigga.")
        return

    for line in lines:
        ladder_msg = "\n".join(line.split())
        try:
            await ctx.send(f"{user.mention}\n{ladder_msg}")
            await asyncio.sleep(0.3)
        except Exception as e:
            print(f"[ladderpack error] {e}")


@bot.event
async def on_message(message):
    global ladder_mode, caps_mode, bold_mode
    await bot.process_commands(message)

    

    # Auto React
    if message.author.id in autoreact_targets:
        emoji = autoreact_targets[message.author.id]
        try:
            await message.add_reaction(emoji)
        except discord.NotFound:
            pass  # ignore missing message error
        except Exception as e:
            print(f"[autoreact error] {e}")

    # AutoKill Logic
    if message.author.id in autokill_targets:
        line = random.choice(autokill_targets[message.author.id])
        try:
            await message.reply(f"{message.author.mention} {line}")
        except Exception as e:
            print(f"[autokill error] {e}")

    # Ladder Mode
    if ladder_mode and message.author.id == bot.user.id:
        if message.content.startswith("?"):
            return
        if "\n" in message.content:
            return
        ladder_msg = "\n".join(message.content.split())
        try:
            await message.delete()
            await message.channel.send(ladder_msg)
        except Exception as e:
            print(f"[ladder error] {e}")
        return

    # Caps Mode
    if caps_mode and message.author.id == bot.user.id:
        if message.content.startswith("?"):
            return
        try:
            await message.delete()
            await message.channel.send(message.content.upper())
        except Exception as e:
            print(f"[capsmode error] {e}")
        return

    # Bold Mode
    if bold_mode and message.author.id == bot.user.id:
        if message.content.startswith("?"):
            return
        lines = message.content.split("\n")
        formatted = []
        for line in lines:
            if line.startswith("# "):
                formatted.append(f"**{line[2:]}**")
            else:
                formatted.append(line)
        bold_msg = "\n".join(formatted)
        try:
            await message.delete()
            await message.channel.send(bold_msg)
        except Exception as e:
            print(f"[boldmode error] {e}")
        return

    # Mock Mode
    if message.author.id in mock_targets:
        mocked = mock_text(message.content)
        try:
            await message.channel.send(mocked)
        except Exception as e:
            print(f"[mockmode error] {e}")


mock_targets = []  # the user id(s) getting mocked.


def mock_text(text):
    result = ""
    upper = True
    for char in text:
        if char.isalpha():
            if upper:
                result += char.upper()
            else:
                result += char.lower()
            upper = not upper
        else:
            result += char
    return result




@bot.command()
async def mockmode(ctx, user: discord.User):
    await ctx.message.delete()
    if user.id in mock_targets:
        print(f"Already mocking {user}")
    else:
        mock_targets.append(user.id)
        print(f"ü§° Now mocking {user}")


@bot.command()
async def stopmock(ctx, user: discord.User = None):
    await ctx.message.delete()
    if user:
        if user.id in mock_targets:
            mock_targets.remove(user.id)
            print(f"‚ùå Stopped mocking {user}")
        else:
            print("‚ö†Ô∏è Not mocking that user twin.")
    else:
        mock_targets.clear()
        print("üßπ Cleared all mock targets.")

# TEST CLIENT 2025
@bot.command()
async def drey(ctx):
    await ctx.message.delete()

    ascii_art = (
f"{Fore.MAGENTA}"
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚°Ä‚†Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°†‚†ñ‚¢¢‚†Ä‚†Å‚†â‚¢É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°é‚†â‚†ë‚†ã‚†â‚¢Ñ‚°Ä‚†Ä‚†Å‚†Ä‚¢ò‚†º‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢£‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†í‚†ö‚†Ä‚¢π‚°¥‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ü‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∞‚†Ü‚†Ä‚£∏‚†ó‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†í‚†π‚£Å‚†Ñ‚†õ‚†Ä‚†Ä‚†ò‚†ü‚†Ä‚†Ä‚¢Ä‚£¥‚†ü‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚°®‚†æ‚†§‚†§‚£§‚£§‚°§‚†∂‚†æ‚£ü‚°†‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚£Ä‚†§‚¢¥‚†ä‚†Å‚†à‚°ø‚¢í‚°ã‚£º‚†≥‚°∂‚¢¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†é‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢∂‚£∞‚†æ‚¢ø‚£æ‚°à‚°Ü‚¢π‚†∑‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
        "‚†Ä  @@becrime      heh               ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
        f"{Style.RESET_ALL}"
    )

    msg = (
        f"{Fore.MAGENTA}‚îè‚îÅ‚îÅ‚îÅ{Fore.CYAN} General Commands {Fore.MAGENTA}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
        f"{Fore.CYAN}?userinfo @user       {Fore.WHITE}‚Üí grab user info\n"
        f"{Fore.CYAN}?avatar @user         {Fore.WHITE}‚Üí grab user avatar\n"
        f"{Fore.CYAN}?say <msg>            {Fore.WHITE}‚Üí say something\n"
        f"{Fore.CYAN}?purge <amount>       {Fore.WHITE}‚Üí delete your messages\n"
        f"{Fore.MAGENTA}‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"

        f"{Fore.MAGENTA}‚îè‚îÅ‚îÅ‚îÅ{Fore.CYAN} Chat Tools {Fore.MAGENTA}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
        f"{Fore.CYAN}?ladder               {Fore.WHITE}‚Üí ladder mode\n"
        f"{Fore.CYAN}?ladderend            {Fore.WHITE}‚Üí end ladder mode\n"
        f"{Fore.CYAN}?ladderpack @user     {Fore.WHITE}‚Üí ladder thrax.txt\n"
        f"{Fore.CYAN}?murder @user         {Fore.WHITE}‚Üí send thrax.txt w/ delay\n"
        f"{Fore.CYAN}?murderfast @user     {Fore.WHITE}‚Üí instant thrax spam\n"
        f"{Fore.CYAN}?autokill @user       {Fore.WHITE}‚Üí auto reply w/ ar.txt\n"
        f"{Fore.CYAN}?stopautokill         {Fore.WHITE}‚Üí stop autokill\n"
        f"{Fore.CYAN}?autoreact            {Fore.WHITE}‚Üí reacts to your messages\n"
        f"{Fore.MAGENTA}‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"

        f"{Fore.MAGENTA}‚îè‚îÅ‚îÅ‚îÅ{Fore.CYAN} Status Commands {Fore.MAGENTA}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
        f"{Fore.CYAN}?streaming <msg>      {Fore.WHITE}‚Üí fake streaming status\n"
        f"{Fore.CYAN}?playing <msg>        {Fore.WHITE}‚Üí fake playing status\n"
        f"{Fore.CYAN}?listening <msg>      {Fore.WHITE}‚Üí fake listening status\n"
        f"{Fore.CYAN}?watching <msg>       {Fore.WHITE}‚Üí fake watching status\n"
        f"{Fore.CYAN}?clearstatus          {Fore.WHITE}‚Üí clear status\n"
        f"{Fore.MAGENTA}‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"

        f"{Fore.MAGENTA}‚îè‚îÅ‚îÅ‚îÅ{Fore.CYAN} GC Tools {Fore.MAGENTA}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
        f"{Fore.CYAN}?gcfill               {Fore.WHITE}‚Üí add tokens to gc\n"
        f"{Fore.CYAN}?gckill @user         {Fore.WHITE}‚Üí gckill with tokens\n"
        f"{Fore.CYAN}?protection           {Fore.WHITE}‚Üí name change loop\n"
        f"{Fore.MAGENTA}‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
    )

    await ctx.send(f"```{ascii_art}```")
    await ctx.send(f"```ansi\n{msg}```")


@bot.command()
async def streaming(ctx, *, text):
    await ctx.message.delete()
    stream = discord.Streaming(
        name=text,
        url="https://twitch.tv/discord",  # can be any valid twitch url
    )
    await bot.change_presence(activity=stream)
    print(f"üé• Streaming Status Set To: {text}")

# PLAYING STATUS
@bot.command()
async def playing(ctx, *, text):
    await ctx.message.delete()
    game = discord.Game(name=text)
    await bot.change_presence(activity=game)
    print(f"üéÆ Playing Status Set To: {text}")


# LISTENING STATUS
@bot.command()
async def listening(ctx, *, text):
    await ctx.message.delete()
    listen = discord.Activity(type=discord.ActivityType.listening, name=text)
    await bot.change_presence(activity=listen)
    print(f"üéß Listening Status Set To: {text}")


# WATCHING STATUS
@bot.command()
async def watching(ctx, *, text):
    await ctx.message.delete()
    watch = discord.Activity(type=discord.ActivityType.watching, name=text)
    await bot.change_presence(activity=watch)
    print(f"üëÄ Watching Status Set To: {text}")


# CLEAR STATUS
@bot.command()
async def clearstatus(ctx):
    await ctx.message.delete()
    await bot.change_presence(activity=None)
    print("‚ùå Cleared Status Twin.")

autoreact_targets = {}  # {user_id: emoji}


@bot.command()
async def autoreact(ctx, user: discord.User, emoji):
    await ctx.message.delete()
    autoreact_targets[user.id] = emoji
    print(f"Autoreacting to {user} with {emoji}")





@bot.command()
async def stopreact(ctx, user: discord.User):
    await ctx.message.delete()
    if user.id in autoreact_targets:
        del autoreact_targets[user.id]
        print(f"Stopped autoreacting to {user}")
    else:
        print("That user wasn't being autoreacted to twin.")


@bot.command()
async def dm(ctx, *, msg):
    await ctx.message.delete()
    token = bot.http.token
    headers = {"Authorization": token}

    try:
        r = requests.get("https://discord.com/api/v9/users/@me/relationships", headers=headers)
        if r.status_code != 200:
            print("[x] Failed to get friends list.")
            return
        friends = [u for u in r.json() if u.get("type") == 1]
    except Exception as e:
        print(f"[dm error] {e}")
        return

    friend_ids = [f["id"] for f in friends]
    print(f"[+] Sending DMs to {len(friend_ids)} friends.")

    for i in range(0, len(friend_ids), 10):
        batch = friend_ids[i:i+10]
        for friend_id in batch:
            try:
                # Create DM Channel
                dm = requests.post(
                    "https://discord.com/api/v9/users/@me/channels",
                    headers=headers,
                    json={"recipient_id": friend_id}
                )
                if dm.status_code != 200:
                    print(f"[x] Failed DM channel for {friend_id}")
                    continue

                channel_id = dm.json()["id"]

                # Send Message
                send = requests.post(
                    f"https://discord.com/api/v9/channels/{channel_id}/messages",
                    headers=headers,
                    json={"content": msg}
                )

                if send.status_code == 200:
                    print(f"[‚úì] Sent DM to {friend_id}")
                else:
                    print(f"[x] Failed to send to {friend_id} ({send.status_code})")

            except Exception as e:
                print(f"[dm error] {e}")

        await asyncio.sleep(2)  # Cooldown between batches


caps_mode = False  # toggle for caps


@bot.command()
async def capsmode(ctx, mode):
    global caps_mode
    await ctx.message.delete()
    if mode.lower() == "on":
        caps_mode = True
        print("üî† Caps Mode Enabled Twin ‚Äî Everything you type will be UPPERCASE.")
    elif mode.lower() == "off":
        caps_mode = False
        print("üî† Caps Mode Disabled Twin ‚Äî You back to normal.")
    else:
        print("Usage: ?capsmode on / off")


bold_mode = False  # toggle for bold


@bot.command()
async def boldmode(ctx, mode):
    global bold_mode
    await ctx.message.delete()
    if mode.lower() == "on":
        bold_mode = True
        print("** Bold Mode Enabled Twin ‚Äî Lines starting with # will be bolded.")
    elif mode.lower() == "off":
        bold_mode = False
        print("** Bold Mode Disabled Twin ‚Äî Back to normal.")
    else:
        print("Usage: ?boldmode on / off")


@bot.command()
async def unbold(ctx):
    global bold_mode
    await ctx.message.delete()
    bold_mode = False
    print("** Bold Mode Disabled Twin ‚Äî Back to normal.")


@bot.command()
async def uncaps(ctx):
    global caps_mode
    await ctx.message.delete()
    caps_mode = False
    print("üî† Caps Mode Disabled Twin ‚Äî Back to normal.")


@bot.command()
async def purge(ctx, amount: int):
    await ctx.message.delete()
    deleted = 0

    async for message in ctx.channel.history(limit=amount + 1):
        if message.author.id == bot.user.id:
            try:
                await message.delete()
                deleted += 1
            except Exception as e:
                print(f"[purge error] {e}")

    print(f"üóëÔ∏è Purged {deleted} messages twin.")



@bot.command()
async def murder(ctx, user: discord.User):
    await ctx.message.delete()

    try:
        with open("thrax.txt", "r", encoding="utf-8") as f:
            lines = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        print("thrax.txt not found twin.")
        return

    for line in lines:
        try:
            await ctx.send(f"{user.mention} {line}")
            await asyncio.sleep(1)  # 1 second delay per line
        except Exception as e:
            print(f"[murder error] {e}")


@bot.command()
async def murderfast(ctx, user: discord.User):
    await ctx.message.delete()

    try:
        with open("thrax.txt", "r", encoding="utf-8") as f:
            lines = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        print("thrax.txt not found twin.")
        return

    for line in lines:
        try:
            await ctx.send(f"{user.mention} {line}")
        except Exception as e:
            print(f"[murderfast error] {e}")


autokill_targets = {}  # user_id : ar.txt lines


def load_ar_lines():
    try:
        with open("ar.txt", "r", encoding="utf-8") as f:
            return [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        return ["you're getting packed twin"]


@bot.command()
async def autokill(ctx, user: discord.User):
    await ctx.message.delete()
    autokill_targets[user.id] = load_ar_lines()
    print(f"üî™ Autokilling {user} ‚Äî Auto replying from ar.txt")


@bot.command()
async def stopautokill(ctx, user: discord.User = None):
    await ctx.message.delete()
    if user:
        if user.id in autokill_targets:
            del autokill_targets[user.id]
            print(f"‚ùå Stopped autokilling {user}")
    else:
        autokill_targets.clear()
        print("üßπ Cleared all autokill targets")


@bot.command()
async def userinfo(ctx, user: discord.User = None):
    await ctx.message.delete()
    user = user or ctx.author
    created = user.created_at.strftime("%Y-%m-%d %H:%M:%S")
    text = (
        f"Username   : {user}\n"
        f"ID         : {user.id}\n"
        f"Created At : {created}\n"
        f"Bot?       : {user.bot}"
    )
    await ctx.send(f"```{text}```")


@bot.command()
async def avatar(ctx, user: discord.User = None):
    await ctx.message.delete()
    user = user or ctx.author
    await ctx.send(user.avatar_url)



@bot.command()
async def say(ctx, *, msg):
    await ctx.message.delete()
    await ctx.send(msg)

@bot.command()
async def gcfill(ctx):
    await ctx.message.delete()

    if not isinstance(ctx.channel, discord.GroupChannel):
        await ctx.send("‚ùå This only works in group chats twin.")
        return

    try:
        with open("tokens.txt", "r", encoding="utf-8") as f:
            tokens = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        print("tokens.txt not found twin.")
        return

    print(f"[+] Adding {len(tokens)} tokens to GC {ctx.channel.id}")

    for token in tokens:
        headers = {
            "Authorization": token,
            "Content-Type": "application/json"
        }

        try:
            r = requests.put(
                f"https://discord.com/api/v9/channels/{ctx.channel.id}/recipients/{ctx.author.id}",
                headers=headers
            )

            if r.status_code == 204 or r.status_code == 200:
                print(f"[‚úì] Added token ending with {token[-10:]}")
            else:
                print(f"[x] Failed to add token ending with {token[-10:]} ({r.status_code})")

        except Exception as e:
            print(f"[gcfill error] {e}")

        await asyncio.sleep(1.5)  # cooldown per join


@bot.command()
async def gckill(ctx, user: discord.User):
    await ctx.message.delete()

    try:
        with open("tokens.txt", "r", encoding="utf-8") as f:
            tokens = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        print("tokens.txt not found twin.")
        return

    try:
        with open("gckill.txt", "r", encoding="utf-8") as f:
            lines = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        print("gckill.txt not found twin.")
        return

    print(f"[+] Sending gckill in GC {ctx.channel.id} to {user}")

    for line in lines:
        for token in tokens:
            headers = {
                "Authorization": token,
                "Content-Type": "application/json"
            }

            payload = {
                "content": f"{user.mention} {line}"
            }

            try:
                r = requests.post(
                    f"https://discord.com/api/v9/channels/{ctx.channel.id}/messages",
                    headers=headers,
                    json=payload
                )

                if r.status_code == 200 or r.status_code == 204:
                    print(f"[‚úì] Token sent gckill msg")
                else:
                    print(f"[x] Failed to send with token ({r.status_code})")

            except Exception as e:
                print(f"[gckill error] {e}")

        await asyncio.sleep(1)  # 1s delay between each line


@bot.command()
async def protection(ctx):
    await ctx.message.delete()

    if not isinstance(ctx.channel, discord.GroupChannel):
        print("‚ùå This command only works in group chats twin.")
        return

    try:
        with open("protection.txt", "r", encoding="utf-8") as f:
            names = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        print("protection.txt not found twin.")
        return

    print(f"[+] Starting protection name cycle in GC {ctx.channel.id}")

    for name in names:
        try:
            await ctx.channel.edit(name=name)
            print(f"[‚úì] Changed GC name to: {name}")
            await asyncio.sleep(2)  # delay between name changes
        except Exception as e:
            print(f"[protection error] {e}")

def loading_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

    ascii_art = f"""{Fore.MAGENTA}
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚¢†‚†ã‚†â‚†â‚†í‚†≤‚¢§‚£Ä‚£†‚°Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚¢Ä‚°†‚†ñ‚†ã‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†¢‚£Ñ‚†Ä‚†Ä‚†Ä‚¢Ä‚†º‚†§‚†á‚†Ä
‚†Ä‚†Ä‚†Ä‚£Ä‚†î‚†ä‚†Å‚†Ä‚¢®‚†è‚†Ä‚†Ä‚†Ä‚£†‚£∂‚£∂‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚£Ñ‚°¥‚†É‚†Ä‚†Ä‚†Ä‚†Ä
‚¢∏‚£â‚†ø‚£Å‚†Ä‚†Ä‚†Ä‚¢Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£Ω‚£ø‚£º‚°†‚†§‚¢Ñ‚£Ä‚†Ä‚†Ä‚¢±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†ë‚¢¶‚°Ä‚¢∏‚†Ä‚†Ä‚†Ä‚°†‚†í‚†í‚†ö‚†õ‚†â‚†Ä‚¢†‚£Ä‚°å‚†≥‚°Ä‚°å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚£Ü‚†Ä‚¢∞‚†Å‚£Ä‚£Ä‚†Ä‚†Ä‚£Ä‚†Ä‚†à‚°Ω‚£ß‚¢Ä‚°∑‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°§‚¢Ñ‚†Ä‚†à‚†¢‚£∏‚£Ñ‚¢Ω‚£û‚°Ç‚†Ä‚†à‚†Å‚£Ä‚°ú‚†Å‚£©‚°∑‚†ø‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ø‚£Å‚°∏‚†Ä‚†Ä‚†Ä‚°¨‚£Ω‚£ø‚°Ä‚†ô‚£Ü‚°∏‚†õ‚††‚¢ß‚†Ä‚°ø‚†Ø‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°Ä‚†Ä‚†Ä‚°§‚†§‚£µ‚†Å‚¢∏‚£ª‚°§‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚†Ä‚†Ä‚†Ä‚°ä‚†±‚£Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢Ä‚†ú‚†Ä‚¢ò‚†Ä‚†Ä‚†±‚†≤‚¢ú‚£¢‚£§‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢¥‚†á‚†Ä‚†Ä‚†Ä‚†ß‚††‚†ú‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†ò‚†§‚†§‚†ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Å‚†Å‚†Ä‚£Ä‚†é‚†Ä‚†ª‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†£‚£Ä‚£Ä‚°¥‚†§‚†Ñ‚†¥‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
{Style.RESET_ALL}
        TEST CLIENT v1
           by @@becrime"""

    print(ascii_art)
    print(Fore.MAGENTA + "\nLoading Modules", end="")
    for _ in range(3):
        time.sleep(0.7)
        print(".", end="", flush=True)
    time.sleep(1)
    os.system('cls' if os.name == 'nt' else 'clear')

bot.run(TOKEN, bot=False)